syntax = "proto3";
package models.grpc;
option go_package = "github.com/bptlab/cepta/models/grpc/replayer";
option java_package = "org.bptlab.cepta.models.grpc.replayer";

import "google/protobuf/timestamp.proto";
import "models/constants/Topic.proto";
import "models/events/Event.proto";

service Replayer {

  // Basic controls
  rpc SeekTo(google.protobuf.Timestamp) returns (Success) {}
  rpc Reset(Empty) returns (Success) {}
  rpc Start(ReplayStartOptions) returns (Success) {}
  rpc Stop(Empty) returns (Success) {}

  // Configuration
  rpc SetSpeed(Speed) returns (Success) {}
  rpc SetType(ReplayTypeOption) returns (Success) {}
  rpc SetOptions(ReplayOptions) returns (Success) {}

  // Query
  rpc GetStatus(Empty) returns (ReplayStatus) {}
  rpc GetOptions(Empty) returns (ReplayStartOptions) {}

  // Custom querying for internal testing infrastructure
  rpc Query(QueryOptions) returns (stream ReplayedEvent) {}
}

enum InternalControlMessageType {
  RESET = 0;
  SEEK = 1;
  SHUTDOWN = 2;
}

enum ReplayType {
  // Proportional is default
  PROPORTIONAL = 0;
  CONSTANT = 1;
}

message ReplayTypeOption {
  ReplayType type = 1;
}

message Speed {
  int32 speed = 1;
}

message ReplayStatus {
  bool active = 1;
}

message Timerange {
  google.protobuf.Timestamp start = 1;
  google.protobuf.Timestamp end = 2;
}

message ReplayOptions {
  Speed speed = 2;
  Timerange range = 3;
  ReplayType type = 5;
}

message ReplayStartOptions {
  repeated string ids = 1;
  Speed speed = 2;
  Timerange range = 3;
  ReplayType type = 4;
}

message Empty {}

message Success {
  bool success = 1;
}

message ReplayedEvent {
  google.protobuf.Timestamp replay_timestamp = 1;
  models.events.Event event = 2;
};

// Query Options
message QueryOptions {
  repeated string ids = 1;
  repeated models.constants.Topic sources = 2;
  Timerange timerange = 3;
  int32 limit = 4;
  int32 offset = 5;
}
version: "3.6"
services:
  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - ${CEPTA_ZOOKEEPER_PORT}:2181
    # Enable volume for persistence
    # volumes:
    #   - zookeeper_data:/bitnami
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"

  kafka:
    image: romnn/jmxkafka
    ports:
      - ${CEPTA_KAFKA_PORT}:9092
      - 29092:29092
    environment:
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT:  zookeeper:${CEPTA_ZOOKEEPER_PORT}
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:29092
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OPTS: -javaagent:/usr/app/jmx_prometheus_javaagent.jar=7072:/usr/app/prom-jmx-agent-config.yml

      # For bitnami/kafka:2.3.0 image
      # KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:${CEPTA_ZOOKEEPER_PORT}
      # ALLOW_PLAINTEXT_LISTENER: "yes"
      # KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      # KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://:29092
      # KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
    depends_on:
      - zookeeper

  kafka-manager:
    image: sheepkiller/kafka-manager
    ports:
      - ${CEPTA_KAFKA_MANAGER_PORT}:9000
    environment:
      ZK_HOSTS: zookeeper:${CEPTA_ZOOKEEPER_PORT}
      KM_VERSION: 2.3.0
    depends_on:
     - kafka

  kafdrop:
    image: thomsch98/kafdrop
    ports:
      - ${CEPTA_KAFDROP_PORT}:9001
    environment:
      ZK_HOSTS: zookeeper:${CEPTA_ZOOKEEPER_PORT}
      LISTEN: ${CEPTA_KAFDROP_PORT}
    depends_on:
     - kafka

  flink-jobmanager:
    image: flink:latest
    expose:
      - 6123
    ports:
      - ${CEPTA_FLINK_JOBMANAGER_PORT}:6123
      - ${CEPTA_FLINK_JOBMANAGER_UI_PORT}:8081
    command: jobmanager
    environment:
      JOB_MANAGER_RPC_ADDRESS: flink-jobmanager

  flink-taskmanager:
    image: flink:latest
    expose:
      - 6121
      - 6122
    #ports:
    #  - ${CEPTA_FLINK_TASKMANAGER_PORT_1}:6121
    #  - ${CEPTA_FLINK_TASKMANAGER_PORT_2}:6122
    depends_on:
      - flink-jobmanager
    command: taskmanager
    environment:
      JOB_MANAGER_RPC_ADDRESS: flink-jobmanager

# ----- For our current deployment we no longer use postgre but for reference if you need to use postgre
#  postgres:
#    image: postgres
#    restart: always
#    environment:
#      POSTGRES_PASSWORD: example
#      POSTGRES_USER: postgres
#      # Secrets might be a good option but the host value is problematic (must be localhost)
#      # POSTGRES_PASSWORD_FILE: /run/secrets/postgres-passwd
#      # Use volumes for persistence but avoid during changes of configuration
#    volumes:
#      - postgres_data:/var/lib/postgresql/data
#    healthcheck:
#      test: ["CMD-SHELL", "pg_isready -U postgres"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#    secrets:
#      - source: postgres_passwd
#        target: postgres-passwd
#    expose:
#      - 5432
#    ports:
#      - ${CEPTA_POSTGRES_PORT}:5432
#    logging:
#      # Disable logging
#      driver: none
#
#  pgadmin:
#    image: dpage/pgadmin4:4.14
#    restart: "no"
#    environment:
#      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
#      PGADMIN_CONFIG_SERVER_MODE: "False"
#    ports:
#      - ${CEPTA_PGADMIN_PORT}:80
#    volumes:
#      - ../../../deployment/common/pgadmin/pgadmin-servers.json:/pgadmin4/servers.json
#      - ../../../deployment/common/exec-win-compat.sh:/exec-win-compat.sh
#      - ../../../deployment/common/pgadmin/pgadmin-entrypoint.sh:/entrypoint.sh
#      - ../../../deployment/common/pgadmin/pgpass.txt:/.pgpass
#    entrypoint: "/bin/sh /exec-win-compat.sh /entrypoint.sh"
#    healthcheck:
#      test: ["CMD", "curl -f 'http://localhost:8070'"]
#      interval: 3s
#      timeout: 2s
#      retries: 20
#    logging:
#      # Disable logging
#      driver: none

  core:
    image: bazel/core:image
    command:
      - --broker=kafka:9092
    depends_on:
      - flink-jobmanager
      - flink-taskmanager
      - kafka
      - replayer
      # - postgres
      # - mongodb

  notification:
    image: bazel/osiris/notification:image
    environment:
      WS_PORT: 5000
      KAFKA_BROKERS: kafka:9092
      USERMGMT_HOST: usermgmt
      USERMGMT_PORT: 80
      REDIS_HOST: redis
      REDIS_PORT: 6379
      LOG: DEBUG
    ports:
      - ${CEPTA_NOTIFICATION_WS_PORT}:5000
    depends_on:
      #- flink-jobmanager
      #- flink-taskmanager
      - kafka
      #- replayer
      - redis
      - usermgmt

  auth:
    image: bazel/osiris/auth:image
    ports:
      - ${CEPTA_AUTH_BACKEND_PORT}:80
    volumes:
      - ../../keys/sample/auth.key:/etc/keys/sign.key
      - ../../keys/sample/auth.jwk.json:/etc/keys/jwks.json
    environment:
      KAFKA_BROKERS: kafka:9092
      MONGODB_HOST: mongodb
      MONGODB_PORT: ${CEPTA_MONGODB_PORT}
      SIGNING_KEY: /etc/keys/sign.key
      JWKS_JSON: /etc/keys/jwks.json
    depends_on:
      - mongodb

  usermgmt:
    image: bazel/osiris/usermgmt:image
    ports:
      - ${CEPTA_USERMGMT_BACKEND_PORT}:80
    environment:
      KAFKA_BROKERS: kafka:9092
      MONGODB_HOST: mongodb
      MONGODB_PORT: ${CEPTA_MONGODB_PORT}
      INITIAL_EMAIL: cepta@cepta.org
      INITIAL_PASSWORD: cepta
      CLEAR: "true"
    depends_on:
      - mongodb
      - auth

  # bazel run //osiris/usermgmt:build-image --platforms=@io_bazel_rules_go//go/toolchain:linux_amd64
  # bazel run //auxiliary/producers/replayer -- --port 8083 --mode constant --replay-log debug --immediate  --include-sources LIVE_TRAIN_DATA

  replayer:
    image: bazel/auxiliary/producers/replayer:image
    depends_on:
      - kafka
      #- postgres # now we use mongodb as replayer DB
      - mongodb  # in most cases we use an external mongoDB
    environment:
      KAFKA_BROKERS: kafka:9092
      PORT: 9000
      # Benchmark indicates MongoDB is the bottleneck
      # REPLAY_MODE: constant
      # REPLAY_LOG: debug
      # PAUSE: 0
      # INCLUDE_SOURCES: LIVE_TRAIN_DATA
      MONGODB_HOST: mongodb
      MONGODB_PORT: ${CEPTA_MONGODB_PORT}
    ports:
      - ${CEPTA_PRODUCER_TRAIN_DATA_GRPC_PORT}:9000

volumes:
  # Use these if you need data to persist for kafka and zookeeper across restarts
  # zookeeper_data:
  #   driver: local
  # kafka_data:
  #   driver: local
  # mongodb_data:
  #  driver: local
   postgres_data:
    driver: local
   #  driver_opts:
   #   type: 'none'
   #   o: 'bind'
   #   device: '/media/roman/BPDATA/postgres-data'

secrets:
  postgres_passwd:
    file: ../../../deployment/common/pgadmin/pgpass.txt

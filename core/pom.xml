<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.bptlab.cepta</groupId>
    <artifactId>cepta</artifactId>
    <version>1.0</version>
  </parent>

  <artifactId>cepta-core</artifactId>
  <version>1.0</version>
  <packaging>jar</packaging>
  <name>cepta-core</name>
  <url>https://github.com/bptlab/cepta</url>
  <description>Stream processing core for the cepta transport monitoring platform</description>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <flink.version>1.9.0</flink.version>
    <java.version>1.8</java.version>
    <scala.binary.version>2.11</scala.binary.version>
    <maven.compiler.source>${java.version}</maven.compiler.source>
    <maven.compiler.target>${java.version}</maven.compiler.target>
    <!-- This config allows the exec plugin to be used: mvn clean compile exec:java -->
    <exec.mainClass>org.bptlab.cepta.Main</exec.mainClass>

    <grpc.version>1.25.0</grpc.version>
    <protobuf.version>3.10.0</protobuf.version>
    <protoc.version>3.10.0</protoc.version>
  </properties>

  <repositories>
    <repository>
      <id>apache.snapshots</id>
      <name>Apache Development Snapshot Repository</name>
      <url>https://repository.apache.org/content/repositories/snapshots/</url>
      <releases>
        <enabled>false</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </repositories>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>io.grpc</groupId>
        <artifactId>grpc-bom</artifactId>
        <version>${grpc.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <!-- Cepta modules -->
    <dependency>
      <groupId>org.bptlab.cepta</groupId>
      <artifactId>cepta-utils</artifactId>
      <version>1.0</version>
    </dependency>
    <dependency>
      <groupId>org.bptlab.cepta</groupId>
      <artifactId>cepta-config</artifactId>
      <version>1.0</version>
    </dependency>
    <dependency>
      <groupId>org.bptlab.cepta.producers</groupId>
      <artifactId>cepta-producer</artifactId>
      <version>1.0</version>
    </dependency>
    <dependency>
      <groupId>org.bptlab.cepta</groupId>
      <artifactId>cepta-schemas</artifactId>
      <version>1.0</version>
    </dependency>

    <!-- Apache Flink dependencies -->
    <!-- These dependencis are provided, because they should not be packaged into the JAR file. -->
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-java</artifactId>
      <version>${flink.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-streaming-java_${scala.binary.version}</artifactId>
      <version>${flink.version}</version>
    </dependency>

    <!-- Rocks db state backend dependency -->
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-statebackend-rocksdb_${scala.binary.version}</artifactId>
      <version>${flink.version}</version>
    </dependency>

    <!-- Flink testing utils -->
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-test-utils_${scala.binary.version}</artifactId>
      <version>${flink.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- Flink runtime for testing harnesses -->
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-runtime_${scala.binary.version}</artifactId>
      <version>${flink.version}</version>
      <scope>test</scope>
      <type>test-jar</type>
    </dependency>

    <!-- Flink streaming dependency for testing harnesses -->
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-streaming-java_${scala.binary.version}</artifactId>
      <version>${flink.version}</version>
      <scope>test</scope>
      <type>test-jar</type>
    </dependency>

    <!-- Kafka connector -->
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-connector-kafka-0.11_2.11</artifactId>
      <scope>compile</scope>
      <version>${flink.version}</version>
    </dependency>

    <!-- avro deserialization schema-->
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-avro</artifactId>
      <version>${flink.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-core</artifactId>
      <version>${flink.version}</version>
    </dependency>

    <!-- Influxdb connector
    <dependency>
      <groupId>org.influxdb</groupId>
      <artifactId>influxdb-java</artifactId>
      <version>2.3</version>
    </dependency>
    -->

    <!-- jdbc database connector -->
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <version>42.2.0</version>
    </dependency>
  </dependencies>

  <build>

    <plugins>
      <plugin>
        <groupId>org.apache.avro</groupId>
        <artifactId>avro-maven-plugin</artifactId>
        <version>1.8.2</version>
        <executions>
          <execution>
            <configuration>
              <sourceDirectory>${project.parent.basedir}/schemas/src/main/avro/</sourceDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>

    <pluginManagement>
      <plugins>

    <plugin>
      <groupId>org.codehaus.mojo</groupId>
      <artifactId>exec-maven-plugin</artifactId>
      <configuration>
        <skip>false</skip>
      </configuration>
    </plugin>
      <!-- Protobuf gRPC compiler -->
      <!-- Generated stubs can be found in generated-sources and normally imported -->
      <plugin>
        <groupId>org.xolstice.maven.plugins</groupId>
        <artifactId>protobuf-maven-plugin</artifactId>
        <version>0.6.1</version>
        <configuration>
          <protocArtifact>
            com.google.protobuf:protoc:${protoc.version}:exe:${os.detected.classifier}
          </protocArtifact>
          <pluginId>grpc-java</pluginId>
          <pluginArtifact>
            io.grpc:protoc-gen-grpc-java:${grpc.version}:exe:${os.detected.classifier}
          </pluginArtifact>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
              <goal>compile-custom</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      </plugins></pluginManagement>
  </build>
</project>

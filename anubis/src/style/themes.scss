$base-color-dark: #161616;

$shouldDarken: (
  'light': true,
  'dark': false
) !default;

$themes: (
    'light': (
        /*
        Light theme (default)
        */
        'bgc-body': #FFF,
        'bgc-sidebar': #FFF,
        'bgc-navbar': #FFF,
        'bgc-content': #FFF,
        'c-default-text': #000,
        'c-delay-alert': rgb(247, 29, 0),
        'c-delay-warning': rgb(247, 99, 0),
        'c-delay-fine': rgb(111, 221, 20),
        'c-accent-text': rgb(247, 99, 0),
        'c-logo-text': rgb(247, 99, 0),
        'c-sidebar-icon-dashboard': rgb(247, 99, 0),
        'c-sidebar-icon-manage': rgb(247, 99, 0),
        'c-sidebar-icon-feed': rgb(247, 99, 0),
        'c-sidebar-icon-map': rgb(247, 99, 0),
        'bc-table-button': rgb(0, 247, 111),
        'bgc-scrollbar': rgb(247, 99, 0),
    ),
    'dark': (
        /*
        Dark theme (default)
        */
        'bgc-body': $base-color-dark,
        'bgc-sidebar': $base-color-dark,
        'bgc-navbar': $base-color-dark,
        'bgc-content': $base-color-dark,
        'c-default-text': white,
        'c-delay-alert': rgb(247, 29, 0),
        'c-delay-warning': rgb(247, 99, 0),
        'c-delay-fine': rgb(111, 221, 20),
        'c-accent-text': rgb(0, 247, 185),
        'c-logo-text': rgb(0, 247, 111),
        'c-sidebar-icon-dashboard': rgb(0, 247, 111),
        'c-sidebar-icon-manage': rgb(247, 0, 235),
        'c-sidebar-icon-feed': rgb(247, 0, 41),
        'c-sidebar-icon-map': rgb(161, 247, 0),
        'bc-table-button': rgb(0, 247, 111),
        'bgc-scrollbar': rgb(0, 247, 111),
    )
) !default;


/* Theme mixin */
@mixin theme($property, $key, $args:'') {
  // Iterate over the themes
  @each $theme, $colors in $themes {
    // Create a selector (.theme-unicorn .media)
    .theme-#{$theme} & {
      // Output the declaration
      #{$property}: map-get($colors, $key) #{$args};
    }
  }
}

/* TODO: Theme color diff mixin */
@mixin theme-box-shadow($property, $key, $darken, $args:'') {
  @each $theme, $colors in $themes {
    .theme-#{$theme} & {
      #{$property}: darken(map-get($colors, $key), $darken) #{$args};
    }
  }
}

@function invert($color, $amount: 100%) {
  $inverse: change-color($color, $hue: hue($color) + 180);
  @return mix($inverse, $color, $amount);
}


// pow() - Raise number to the nth power
//
// @param {number} $base      The base number
// @param {number} $exponents The exponent to which to raise $base
@function pow($base, $exponents) {
  $raised: 1;

  @for $i from 1 through $exponents {
    $raised: $raised * $base;
  }

  @return $raised;
}

/// Returns the luminance of `$color` as a float (between 0 and 1)
/// 1 is pure white, 0 is pure black
/// @param {Color} $color - Color
/// @return {Number}
/// @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef Reference
// From https://css-tricks.com/snippets/sass/luminance-color-function/
@function luminance($color) {
  $colors: (
    'red': red($color),
    'green': green($color),
    'blue': blue($color)
  );

  @each $name, $value in $colors {
    $adjusted: 0;
    $value: $value / 255;

    @if $value < 0.03928 {
      $value: $value / 12.92;
    } @else {
      $value: ($value + .055) / 1.055;
      $value: pow($value, 2.4);
    }

    $colors: map-merge($colors, ($name: $value));
  }

  @return (map-get($colors, 'red') * .2126) + (map-get($colors, 'green') * .7152) + (map-get($colors, 'blue') * .0722);
}

/* Theme color diff mixin */
@mixin theme-color-diff1($property, $key, $diff, $args:'') {
  @each $theme, $colors in $themes {
    @if map-get($shouldDarken, $theme) {
      .theme-#{$theme} & {
        #{$property}: darken(map-get($colors, $key), $diff) #{$args};
      }
    } @else {
      .theme-#{$theme} & {
        #{$property}: lighten(map-get($colors, $key), $diff) #{$args};
      }
    }
  }
}

/* Theme color diff mixin */
@mixin theme-color-diff($property, $key, $diff, $args:'') {
  @each $theme, $colors in $themes {
    $color: map-get($colors, $key);
    @if luminance($color) > 0.5 {
      .theme-#{$theme} & {
        #{$property}: darken(map-get($colors, $key), $diff) #{$args};
      }
    } @else {
      .theme-#{$theme} & {
        #{$property}: lighten(map-get($colors, $key), $diff) #{$args};
      }
    }
  }
}

/* Theme body mixin */
@mixin theme-body {
  @each $theme, $colors in $themes {
    .theme-#{$theme}-base {
      background-color: map-get($colors, 'bgc-body');
      color: map-get($colors, 'c-body');
    }
  }
}


/* Theme color darken mixin */
@mixin theme-color-darken($property, $key, $darken, $args:'') {
  @each $theme, $colors in $themes {
    .theme-#{$theme} & {
      #{$property}: darken(map-get($colors, $key), $darken) #{$args};
    }
  }
}

/* Theme color lighten mixin */
@mixin theme-color-lighten($property, $key, $lighten, $args:'') {
  @each $theme, $colors in $themes {
    .theme-#{$theme} & {
      #{$property}: lighten(map-get($colors, $key), $lighten) #{$args};
    }
  }
}

@mixin for-size($range) {
  $phone-upper-boundary: 600px;
  $tablet-portrait-upper-boundary: 900px;
  $tablet-landscape-upper-boundary: 1200px;
  $desktop-upper-boundary: 1800px;

  @if $range == phone-only {
    @media (max-width: #{$phone-upper-boundary - 1}) { @content; }
  } @else if $range == phone-landscape {
    @media (max-height: 500px) and (orientation : landscape) { @content; }
  } @else if $range == tablet-portrait-up {
    @media (min-width: $phone-upper-boundary) { @content; }
  } @else if $range == tablet-landscape-up {
    @media (min-width: $tablet-portrait-upper-boundary) { @content; }
  } @else if $range == desktop-up {
    @media (min-width: $tablet-landscape-upper-boundary) { @content; }
  } @else if $range == big-desktop-up {
    @media (min-width: $desktop-upper-boundary) { @content; }
  }
}
